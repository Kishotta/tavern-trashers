using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace TavernTrashers.Api.Common.SourceGenerators;

[Generator]
public class ModuleBoilerplateGenerator : ISourceGenerator
{
	public void Initialize(GeneratorInitializationContext context)
	{
		// No initialization required for now
	}

	public void Execute(GeneratorExecutionContext context)
	{
		// Find all classes with the [GenerateModuleBoilerplate] attribute
		var syntaxTrees = context.Compilation.SyntaxTrees;
		foreach (var tree in syntaxTrees)
		{
			var semanticModel     = context.Compilation.GetSemanticModel(tree);
			var classDeclarations = tree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>();
			foreach (var classDecl in classDeclarations)
			{
				var symbol = semanticModel.GetDeclaredSymbol(classDecl);
				if (symbol is null)
					continue;

				var attributeData = symbol.GetAttributes().FirstOrDefault(attr =>
					attr.AttributeClass?.Name == nameof(GenerateModuleBoilerplateAttribute) ||
					attr.AttributeClass?.ToDisplayString() == typeof(GenerateModuleBoilerplateAttribute).FullName);
				if (attributeData is null)
					continue;

				var ns           = symbol.ContainingNamespace.ToDisplayString();
				var moduleName   = attributeData.ConstructorArguments[0].Value?.ToString() ?? symbol.Name.Replace("Module", "");
				var moduleSchema = attributeData.ConstructorArguments[1].Value?.ToString() ?? "default_schema";
				
				// Generate boilerplate classes
				GenerateBoilerplate(context, ns, moduleName, moduleSchema);
			}
		}
	}

	private static void GenerateBoilerplate(GeneratorExecutionContext context, string ns, string moduleName, string moduleSchema)
	{
		// Add IdempotentDomainEventHandler generation
		var moduleSpecificIdempotentDomainEventHandlerSource = new StringBuilder();
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("// <auto-generated/>");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("// This file was generated by ModuleBoilerplateGenerator.");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Application.Data;");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Application.Messaging;");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Domain.Entities;");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Infrastructure.Outbox;");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine($"namespace {ns}");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("{");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine(
			$"    public class {moduleName}IdempotentDomainEventHandler<TDomainEvent>(IDomainEventHandler<TDomainEvent> decorated, IDbConnectionFactory dbConnectionFactory) : IdempotentDomainEventHandlerBase<TDomainEvent>(decorated, dbConnectionFactory) where TDomainEvent : IDomainEvent");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("    {");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine($"        protected override string Schema => \"{moduleSchema}\";");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("    }");
		moduleSpecificIdempotentDomainEventHandlerSource.AppendLine("}");
		context.AddSource($"{moduleName}IdempotentDomainEventHandler.g.cs", SourceText.From(moduleSpecificIdempotentDomainEventHandlerSource.ToString(), Encoding.UTF8));
		
		// Add IdempotentIntegrationEventHandler generation
		var moduleSpecificIdempotentIntegrationEventHandlerSource = new StringBuilder();
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("// <auto-generated/>");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("// This file was generated by ModuleBoilerplateGenerator.");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Application.Data;");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Application.EventBus;");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("using TavernTrashers.Api.Common.Infrastructure.Inbox;");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine($"namespace {ns}");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("{");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine($"    public class {moduleName}IdempotentIntegrationEventHandler<TIntegrationEvent>(IIntegrationEventHandler<TIntegrationEvent> decorated, IDbConnectionFactory dbConnectionFactory) : IdempotentIntegrationEventHandlerBase<TIntegrationEvent>(decorated, dbConnectionFactory) where TIntegrationEvent : IntegrationEvent");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("    {");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine($"        protected override string Schema => \"{moduleSchema}\";");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("    }");
		moduleSpecificIdempotentIntegrationEventHandlerSource.AppendLine("}");
		context.AddSource($"{moduleName}IdempotentIntegrationEventHandler.g.cs", SourceText.From(moduleSpecificIdempotentIntegrationEventHandlerSource.ToString(), Encoding.UTF8));

		// Add IntegrationEventConsumer generation
		var moduleSpecificIntegrationEventConsumerSource = new StringBuilder();
		moduleSpecificIntegrationEventConsumerSource.AppendLine("// <auto-generated/>");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("// This file was generated by ModuleBoilerplateGenerator.");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("using TavernTrashers.Api.Common.Application.Data;");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("using TavernTrashers.Api.Common.Application.EventBus;");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("using TavernTrashers.Api.Common.Infrastructure.Inbox;");
		moduleSpecificIntegrationEventConsumerSource.AppendLine($"namespace {ns}");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("{");
		moduleSpecificIntegrationEventConsumerSource.AppendLine($"    public class {moduleName}IntegrationEventConsumer<TIntegrationEvent>(IDbConnectionFactory dbConnectionFactory) : IntegrationEventConsumerBase<TIntegrationEvent>(dbConnectionFactory) where TIntegrationEvent : IntegrationEvent");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("    {");
		moduleSpecificIntegrationEventConsumerSource.AppendLine($"        protected override string Schema => \"{moduleSchema}\";");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("    }");
		moduleSpecificIntegrationEventConsumerSource.AppendLine("}");
		context.AddSource($"{moduleName}IntegrationEventConsumer.g.cs", SourceText.From(moduleSpecificIntegrationEventConsumerSource.ToString(), Encoding.UTF8));
	}
}